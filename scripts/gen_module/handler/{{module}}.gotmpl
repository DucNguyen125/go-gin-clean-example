package handler

import (
	"context"

	errors "base-gin-golang/pkg/errors/custom"
	"base-gin-golang/pkg/pagination"
	"base-gin-golang/usecase/{{module_snake}}"
)

func (h *Handler) Create{{Module}}(
	ctx context.Context,
	input *{{module}}.Create{{Module}}Input,
) (*{{module}}.Create{{Module}}Output, error) {
	if err := h.Validator.Struct(&input.Body); err != nil {
		errValidate := errors.NewValidateError(ctx, input, err)
		return nil, errValidate
	}
	output, err := h.App.{{Module}}UseCase.Create(ctx, input)
	if err != nil {
		errConverted := h.App.ErrorService.ParseInternalServer(err)
		return nil, errConverted
	}
	return output, err
}

func (h *Handler) Get{{Module}}(
	ctx context.Context,
	input *{{module}}.Get{{Module}}ByIDInput,
) (*{{module}}.Get{{Module}}ByIDOutput, error) {
	output, err := h.App.{{Module}}UseCase.GetByID(ctx, input)
	if err != nil {
		errConverted := h.App.ErrorService.ParseInternalServer(err)
		return nil, errConverted
	}
	return output, nil
}

func (h *Handler) GetList{{Module}}(
	ctx context.Context,
	input *{{module}}.GetList{{Module}}Input,
) (*{{module}}.GetList{{Module}}Output, error) {
	pageIndex, pageSize, order := pagination.GetDefaultPagination(
		input.PageIndex, input.PageSize, input.Order,
	)
	input.PageIndex = pageIndex
	input.PageSize = pageSize
	input.Order = order
	output, err := h.App.{{Module}}UseCase.GetList(ctx, input)
	if err != nil {
		errConverted := h.App.ErrorService.ParseInternalServer(err)
		return nil, errConverted
	}
	return output, nil
}

func (h *Handler) Update{{Module}}(
	ctx context.Context,
	input *{{module}}.Update{{Module}}Input,
) (*{{module}}.Update{{Module}}Output, error) {
	if err := h.Validator.Struct(&input.Body); err != nil {
		errValidate := errors.NewValidateError(ctx, input, err)
		return nil, errValidate
	}
	output, err := h.App.{{Module}}UseCase.Update(ctx, input)
	if err != nil {
		errConverted := h.App.ErrorService.ParseInternalServer(err)
		return nil, errConverted
	}
	return output, nil
}

func (h *Handler) Delete{{Module}}(
	ctx context.Context,
	input *{{module}}.Delete{{Module}}Input,
) (*{{module}}.Delete{{Module}}Output, error) {
	output, err := h.App.{{Module}}UseCase.Delete(ctx, input)
	if err != nil {
		errConverted := h.App.ErrorService.ParseInternalServer(err)
		return nil, errConverted
	}
	return output, nil
}
