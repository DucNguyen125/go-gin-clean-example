package {{module}}

import (
	"context"

	"base-gin-golang/domain/repository"
	"base-gin-golang/infra/postgresql"
	dataPkg "base-gin-golang/pkg/data"
)

type UseCase interface {
	Create(ctx context.Context, input *Create{{Module}}Input) (*Create{{Module}}Output, error)
	Delete(ctx context.Context, input *Delete{{Module}}Input) (*Delete{{Module}}Output, error)
	GetByID(ctx context.Context, input *Get{{Module}}ByIDInput) (*Get{{Module}}ByIDOutput, error)
	GetList(ctx context.Context, input *GetList{{Module}}Input) (*GetList{{Module}}Output, error)
	Update(ctx context.Context, input *Update{{Module}}Input) (*Update{{Module}}Output, error)
}

type {{module}}UseCase struct {
	{{module}}Repository repository.{{Module}}Repository
	dataService       dataPkg.Service
	database          *postgresql.Database
}

func New{{Module}}UseCase(
	{{module}}Repository repository.{{Module}}Repository,
	dataService dataPkg.Service,
	database *postgresql.Database,
) UseCase {
	return &{{module}}UseCase{
		{{module}}Repository: {{module}}Repository,
		dataService:       dataService,
		database:          database,
	}
}
